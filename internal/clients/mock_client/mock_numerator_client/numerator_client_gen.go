// Code generated by MockGen. DO NOT EDIT.
// Source: numerator_client.go
//
// Generated by this command:
//
//	mockgen -source numerator_client.go -destination ./mock_client/mock_numerator_client/numerator_client_gen.go
//

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	reflect "reflect"

	response "github.com/c0x12c/numerator-go-sdk/pkg/api/response"
	gomock "go.uber.org/mock/gomock"
)

// MockNumeratorClient is a mock of NumeratorClient interface.
type MockNumeratorClient struct {
	ctrl     *gomock.Controller
	recorder *MockNumeratorClientMockRecorder
}

// MockNumeratorClientMockRecorder is the mock recorder for MockNumeratorClient.
type MockNumeratorClientMockRecorder struct {
	mock *MockNumeratorClient
}

// NewMockNumeratorClient creates a new mock instance.
func NewMockNumeratorClient(ctrl *gomock.Controller) *MockNumeratorClient {
	mock := &MockNumeratorClient{ctrl: ctrl}
	mock.recorder = &MockNumeratorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNumeratorClient) EXPECT() *MockNumeratorClientMockRecorder {
	return m.recorder
}

// FeatureFlagDetails mocks base method.
func (m *MockNumeratorClient) FeatureFlagDetails(flagKey string) (*response.FeatureFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureFlagDetails", flagKey)
	ret0, _ := ret[0].(*response.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeatureFlagDetails indicates an expected call of FeatureFlagDetails.
func (mr *MockNumeratorClientMockRecorder) FeatureFlagDetails(flagKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureFlagDetails", reflect.TypeOf((*MockNumeratorClient)(nil).FeatureFlagDetails), flagKey)
}

// FeatureFlags mocks base method.
func (m *MockNumeratorClient) FeatureFlags(page, size int) ([]response.FeatureFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureFlags", page, size)
	ret0, _ := ret[0].([]response.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeatureFlags indicates an expected call of FeatureFlags.
func (mr *MockNumeratorClientMockRecorder) FeatureFlags(page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureFlags", reflect.TypeOf((*MockNumeratorClient)(nil).FeatureFlags), page, size)
}

// GetValueByKeyWithDefault mocks base method.
func (m *MockNumeratorClient) GetValueByKeyWithDefault(flagKey string, context map[string]any, defaultValue any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueByKeyWithDefault", flagKey, context, defaultValue)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueByKeyWithDefault indicates an expected call of GetValueByKeyWithDefault.
func (mr *MockNumeratorClientMockRecorder) GetValueByKeyWithDefault(flagKey, context, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueByKeyWithDefault", reflect.TypeOf((*MockNumeratorClient)(nil).GetValueByKeyWithDefault), flagKey, context, defaultValue)
}
