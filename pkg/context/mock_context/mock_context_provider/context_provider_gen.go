// Code generated by MockGen. DO NOT EDIT.
// Source: context_provider.go
//
// Generated by this command:
//
//	mockgen -source context_provider.go -destination ./mock_context/mock_context_provider/context_provider_gen.go
//

// Package mock_context is a generated GoMock package.
package mock_context

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockContextProvider is a mock of ContextProvider interface.
type MockContextProvider struct {
	ctrl     *gomock.Controller
	recorder *MockContextProviderMockRecorder
}

// MockContextProviderMockRecorder is the mock recorder for MockContextProvider.
type MockContextProviderMockRecorder struct {
	mock *MockContextProvider
}

// NewMockContextProvider creates a new mock instance.
func NewMockContextProvider(ctrl *gomock.Controller) *MockContextProvider {
	mock := &MockContextProvider{ctrl: ctrl}
	mock.recorder = &MockContextProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextProvider) EXPECT() *MockContextProviderMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockContextProvider) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockContextProviderMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockContextProvider)(nil).Clear))
}

// Context mocks base method.
func (m *MockContextProvider) Context() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockContextProviderMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockContextProvider)(nil).Context))
}

// Set mocks base method.
func (m *MockContextProvider) Set(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockContextProviderMockRecorder) Set(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockContextProvider)(nil).Set), key, value)
}

// Unset mocks base method.
func (m *MockContextProvider) Unset(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unset", key)
}

// Unset indicates an expected call of Unset.
func (mr *MockContextProviderMockRecorder) Unset(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unset", reflect.TypeOf((*MockContextProvider)(nil).Unset), key)
}
